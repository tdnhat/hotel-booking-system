name: CI Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    DOTNET_VERSION: "9.0.x"
    ASPIRE_VERSION: "9.0.x"

jobs:
    build-and-test:
        name: Build and Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Install .NET Aspire workload
              run: dotnet workload install aspire

            - name: Restore dependencies
              run: dotnet restore src/

            - name: Build solution
              run: dotnet build src/ --no-restore --configuration Release

            - name: Run unit tests
              run: dotnet test src/ --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

            - name: Upload coverage reports
              uses: codecov/codecov-action@v4
              if: success()
              with:
                  directory: ./src/TestResults/
                  fail_ci_if_error: true

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Install .NET Aspire workload
              run: dotnet workload install aspire

            - name: Restore dependencies
              run: dotnet restore src/

            - name: Run code analysis
              run: dotnet build src/ --configuration Release --verbosity normal /p:TreatWarningsAsErrors=true

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Install .NET Aspire workload
              run: dotnet workload install aspire

            - name: Restore dependencies
              run: dotnet restore src/

            - name: Run security audit
              run: dotnet list src/ package --vulnerable --include-transitive

    docker-build:
        name: Docker Build
        runs-on: ubuntu-latest
        needs: [build-and-test, code-quality]

        strategy:
            matrix:
                service: [booking-service]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: src/BookingService/HotelBookingSystem.BookingService.Api/Dockerfile
                  push: false
                  tags: hotel-booking-system/${{ matrix.service }}:${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        needs: build-and-test

        services:
            postgres:
                image: postgres:16
                env:
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: hotelbooking_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            redis:
                image: redis:7
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

            rabbitmq:
                image: rabbitmq:3-management
                env:
                    RABBITMQ_DEFAULT_USER: guest
                    RABBITMQ_DEFAULT_PASS: guest
                options: >-
                    --health-cmd "rabbitmq-diagnostics -q ping"
                    --health-interval 30s
                    --health-timeout 30s
                    --health-retries 3
                ports:
                    - 5672:5672
                    - 15672:15672

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Install .NET Aspire workload
              run: dotnet workload install aspire

            - name: Restore dependencies
              run: dotnet restore src/

            - name: Build solution
              run: dotnet build src/ --no-restore --configuration Release

            - name: Run integration tests
              run: dotnet test src/ --filter "Category=Integration" --no-build --configuration Release
              env:
                  ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=hotelbooking_test;Username=postgres;Password=postgres"
                  ConnectionStrings__Redis: "localhost:6379"
                  ConnectionStrings__RabbitMQ: "amqp://guest:guest@localhost:5672/"

    publish-artifacts:
        name: Publish Artifacts
        runs-on: ubuntu-latest
        needs: [build-and-test, code-quality, security-scan]
        if: github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Install .NET Aspire workload
              run: dotnet workload install aspire

            - name: Restore dependencies
              run: dotnet restore src/

            - name: Publish BookingService API
              run: dotnet publish src/BookingService/HotelBookingSystem.BookingService.Api/HotelBookingSystem.BookingService.Api.csproj --configuration Release --output ./publish/booking-service

            - name: Upload BookingService artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: booking-service-${{ github.sha }}
                  path: ./publish/booking-service/
                  retention-days: 30

    notify:
        name: Notify Status
        runs-on: ubuntu-latest
        needs:
            [
                build-and-test,
                code-quality,
                security-scan,
                docker-build,
                integration-tests,
            ]
        if: always()

        steps:
            - name: Notify Success
              if: needs.build-and-test.result == 'success' && needs.code-quality.result == 'success'
              run: echo "✅ All checks passed successfully!"

            - name: Notify Failure
              if: needs.build-and-test.result == 'failure' || needs.code-quality.result == 'failure'
              run: |
                  echo "❌ CI pipeline failed!"
                  exit 1
