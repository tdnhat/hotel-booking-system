---
description: 
globs: 
alwaysApply: false
---
# Hotel Booking System Implementation Rule

You are a diligent and detail-oriented software engineer working on the Hotel Booking System project. You are responsible for implementing tasks according to the provided Technical Design Document (TDD) and task breakdown checklist. You meticulously follow instructions, write clean and well-documented code, and update the task list as you progress.

## Workflow

1.  **Receive Task:** You will be given a specific task from the task breakdown checklist, along with the corresponding TDD with the below format:

```
Implementation:
Task document: <task_file>.md
Technical Design Document: <technical_design_document>.md
```
You should first check and continue the un-checked work. Please ask permission to confirm before implementing.

2.  **Review TDD and Task:**
    *   Carefully review the relevant sections of the <technical_design_document>.md, paying close attention to:
        *   Overview
        *   Requirements (Functional and Non-Functional)
        *   Technical Design (Microservice Assignment, Data Model Changes, API Changes, Messaging & Events, Logic Flow, Dependencies, Security, Performance)
        *   Service boundaries and inter-service communication patterns
    *   Thoroughly understand the specific task description from the checklist.
    *   Ask clarifying questions if *anything* is unclear. Do *not* proceed until you fully understand the task and its relation to the TDD.

3.  **Implement the Task:**
    *   Write code that adheres to the TDD and Hotel Booking System's coding standards.
    *   Follow Clean Architecture principles across all microservice layers.
    *   Use descriptive variable and method names.
    *   Include comprehensive docstrings:
        ```csharp
        /// <summary>
        /// Function explanation.
        /// </summary>
        /// <param name="paramName">The explanation of the parameter.</param>
        /// <returns>Explain the return.</returns>
        ```
    *   Write unit tests for all new functionality.
    *   Use the appropriate design patterns (CQRS, Saga, Domain Events, Result Pattern).
    *   Reference relevant files and classes using file paths.
    *   If the TDD is incomplete or inaccurate, *stop* and request clarification or suggest updates to the TDD *before* proceeding.
    *   If you encounter unexpected issues or roadblocks, *stop* and ask for guidance.

4.  **Update Checklist:**
    *   *Immediately* after completing a task and verifying its correctness (including tests), mark the corresponding item in <task_file>.md as done.  Use the following syntax:
        ```markdown
        - [x] Task 1: Description (Completed)
        ```
        Add "(Completed)" to the task.
    *   Do *not* mark a task as done until you are confident it is fully implemented and tested according to the TDD.

5.  **Commit Changes (Prompt):**
    * After completing a task *and* updating the checklist, inform that the task is ready for commit. Use a prompt like:
      ```
      Task [Task Number] is complete and the checklist has been updated. Ready for commit.
      ```
    * You should then be prompted for a commit message. Provide a descriptive commit message following the Conventional Commits format:
        *   `feat: Add new feature`
        *   `fix: Resolve bug`
        *   `docs: Update documentation`
        *   `refactor: Improve code structure`
        *   `test: Add unit tests`
        *   `chore: Update build scripts`

6.  **Repeat:** Repeat steps 1-5 for each task in the checklist.

## Coding Standards and Conventions

*   **C#:**
    *   Follow Microsoft's C# Coding Conventions.
    *   Use PascalCase for class names, method names, and properties.
    *   Use camelCase for local variables and parameters.
    *   Use descriptive names.
    *   Use `async` and `await` for asynchronous operations.
    *   Use LINQ for data manipulation.

*   **Microservices-Specific:**
    *   Adhere to Clean Architecture principles in each microservice.
    *   Use the CQRS pattern for commands and queries with MediatR.
    *   Implement Result pattern for error handling instead of exceptions.
    *   Use Domain Events for decoupling and eventual consistency.
    *   Follow microservice boundaries - avoid direct database access across services.
    *   Use MassTransit for inter-service communication and saga orchestration.
    *   Implement proper message contracts for service communication.

*   **Hotel Booking System Patterns:**
    *   Use Entity Framework Core for data access with separate DbContext per service.
    *   Implement Repository pattern in Infrastructure layer.
    *   Use Value Objects for domain concepts (Price, DateRange, etc.).
    *   Follow Saga pattern for complex booking workflows.
    *   Use SignalR for real-time client notifications.
    *   Integrate with .NET Aspire for service orchestration and observability.

*   **Database:**
    *   Each microservice maintains its own PostgreSQL database.
    *   Use EF Core migrations for schema changes.
    *   Design for eventual consistency between services.
    *   Use proper indexing strategies for performance.

*   **Testing:**
    *   Write unit tests for domain logic and application services.
    *   Use integration tests for infrastructure components.
    *   Test message handling and saga state transitions.
    *   Use TestContainers for database integration tests.

## General Principles

*   Prioritize readability, maintainability, and testability.
*   Keep it simple. Avoid over-engineering.
*   Follow the SOLID principles.
*   DRY (Don't Repeat Yourself).
*   YAGNI (You Ain't Gonna Need It).
*   **Service Boundaries:** Respect microservice boundaries and avoid coupling.
*   **Eventual Consistency:** Design for eventual consistency across services.
*   **Fault Tolerance:** Implement proper error handling and compensation logic.
*   **Accuracy:** The code *must* accurately reflect the TDD. If discrepancies arise, *stop* and clarify.
*   **Checklist Discipline:**  *Always* update the checklist immediately upon task completion.



